//! Error types

use num_derive::FromPrimitive;
use solana_program::{decode_error::DecodeError, program_error::ProgramError};
use thiserror::Error;

/// Errors that may be returned by the TokenAmm program.
#[derive(Clone, Debug, Eq, Error, FromPrimitive, PartialEq)]
pub enum RouteError {
    /// The account cannot be initialized because it is already being used.
    #[error("AlreadyInUse")]
    AlreadyInUse,
    /// The program address provided doesn't match value generated by the program.
    #[error("InvalidProgramAddress")]
    InvalidProgramAddress,
    /// The deserialization of the Token state returned something besides State::Token.
    #[error("ExpectedMint")]
    ExpectedMint,
    /// The deserialization of the Token state returned something besides State::Account.
    #[error("ExpectedAccount")]
    ExpectedAccount,
    /// The owner of the input isn't set to the program address generated by the program.
    #[error("InvalidOwner")]
    InvalidOwner,
    /// Invalid Sign Account
    #[error("Invalid Sign Account")]
    InvalidSignAccount,
    /// Invalid instruction number passed in
    #[error("Invalid instruction")]
    InvalidInstruction,
    /// The input token is invalid for swap.
    #[error("InvalidInput")]
    InvalidInput,
    /// The calculation exchange rate failed.
    #[error("CalculationExRateFailure")]
    CalculationExRateFailure,
    /// Checked_Sub Overflow
    #[error("Checked_Sub Overflow")]
    CheckedSubOverflow,
    /// Checked_Add Overflow
    #[error("Checked_Add Overflow")]
    CheckedAddOverflow,
    /// Checked_Mul Overflow
    #[error("Checked_Mul Overflow")]
    CheckedMulOverflow,
    /// Checked_Div Overflow
    #[error("Checked_Div Overflow")]
    CheckedDivOverflow,
    /// InvalidSplToken
    #[error("InvalidSplToken")]
    InvalidSplToken,
    /// ConversionFailure
    #[error("Conversion to u64 failed with an overflow or underflow")]
    ConversionFailure,
    /// InvalidPDAToken
    #[error("InvalidPDAToken")]
    InvalidPDAToken,
    /// PDATokenNotExist
    #[error("PDATokenNotExist")]
    PDATokenNotExist,
    /// PDATokenUnexpected
    #[error("PDATokenUnexpected")]
    PDATokenUnexpected,
    /// PDATokenOverSlot
    #[error("PDATokenOverSlot")]
    PDATokenOverSlot,
    /// Calculation overflow
    #[error("Calculation overflow")]
    Overflow,
    /// The account doesn't match the account type
    #[error("NotMatchAccountType")]
    NotMatchAccountType,
    /// The status is invalid.
    #[error("InvalidStatus")]
    InvalidStatus,
    /// can't find value in table
    #[error("TableValueNotFound")]
    TableValueNotFound,
    /// InvalidSysProgramAddress
    #[error("InvalidSysProgramAddress")]
    InvalidSysProgramAddress,
    /// InvalidAmmProgramAddress
    #[error("InvalidAmmProgramAddress")]
    InvalidAmmProgramAddress,
    /// InvalidStableProgramAddress
    #[error("InvalidStableProgramAddress")]
    InvalidStableProgramAddress,
    /// Unknown Route Error
    #[error("Unknown Route Error")]
    UnknownRouteError,
}

impl From<RouteError> for ProgramError {
    fn from(e: RouteError) -> Self {
        ProgramError::Custom(e as u32)
    }
}
impl<T> DecodeError<T> for RouteError {
    fn type_of() -> &'static str {
        "Route Error"
    }
}
